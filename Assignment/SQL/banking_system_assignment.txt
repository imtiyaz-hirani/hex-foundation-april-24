Task 1: 
create database bank_hex_feb_24;
use bank_hex_feb_24;
show tables;

insert into customer(first_name,last_name,dob) values 
('harry','potter','2002-03-21'),
('ronald','weasley','2001-02-10'),
('hermione','granger','2002-11-15');

/* 
+----+------------+-----------+------------+
| id | first_name | last_name | dob        |
+----+------------+-----------+------------+
|  1 | harry      | potter    | 2002-03-21 |
|  2 | ronald     | weasley   | 2001-02-10 |
|  3 | hermione   | granger   | 2002-11-15 |
+----+------------+-----------+------------+
*/

insert into account(account_type,balance,customer_id) values 
('savings',50000,1) ,
('current',120000,2) ,
('zero_balance',100000,3),
('current',150000,1) ,
('savings',30000,3);

/* 
+----+--------------+---------+-------------+
| id | account_type | balance | customer_id |
+----+--------------+---------+-------------+
|  1 | savings      |   50000 |           1 |
|  2 | current      |  120000 |           2 |
|  3 | zero_balance |  100000 |           3 |
|  4 | current      |  150000 |           1 |
|  5 | savings      |   30000 |           3 |
+----+--------------+---------+-------------+
*/

insert into transaction(transaction_type,amount,transaction_date,account_id) 
values 
('deposit', 10000, '2024-02-01',1),
('withdrawal', 5000, '2024-02-02',1),
('deposit', 20000, '2024-02-02',2),
('withdrawal', 8000, '2024-02-02',3),
('transfer', 20000, '2024-02-01',4),
('transfer', 7000, '2024-02-05',5);

/* 
+----+------------------+--------+------------------+------------+
| id | transaction_type | amount | transaction_date | account_id |
+----+------------------+--------+------------------+------------+
|  1 | deposit          |  10000 | 2024-02-01       |          1 |
|  2 | withdrawal       |   5000 | 2024-02-02       |          1 |
|  3 | deposit          |  20000 | 2024-02-02       |          2 |
|  4 | withdrawal       |   8000 | 2024-02-02       |          3 |
|  5 | transfer         |  20000 | 2024-02-01       |          4 |
|  6 | transfer         |   7000 | 2024-02-05       |          5 |
+----+------------------+--------+------------------+------------+
*/
-- Task 2
/* 
2. Write SQL queries for the following tasks:
1. Write a SQL query to retrieve the name, account type and email of all customers. 
2. Write a SQL query to list all transaction corresponding customer.
3. Write a SQL query to increase the balance of a specific account by a certain amount.
4. Write a SQL query to Combine first and last names of customers as a full_name.
5. Write a SQL query to remove accounts with a balance of zero where the account 
type is savings.
6. Write a SQL query to Find customers living in a specific city.
7. Write a SQL query to Get the account balance for a specific account.
8. Write a SQL query to List all current accounts with a balance greater than $1,000.
9. Write a SQL query to Retrieve all transactions for a specific account.
10. Write a SQL query to Calculate the interest accrued on savings accounts based on a 
given interest rate.
11. Write a SQL query to Identify accounts where the balance is less than a specified 
overdraft limit.
12. Write a SQL query to Find customers not living in a specific city.
*/

 
Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:
1. Write a SQL query to Find the average account balance for all customers. 
2. Write a SQL query to Retrieve the top 10 highest account balances.
3. Write a SQL query to Calculate Total Deposits for All Customers in specific date.
4. Write a SQL query to Find the Oldest and Newest Customers.
5. Write a SQL query to Retrieve transaction details along with the account type.
6. Write a SQL query to Get a list of customers along with their account details.
7. Write a SQL query to Retrieve transaction details along with customer information for a 
specific account.
8. Write a SQL query to Identify customers who have more than one account.
9. Write a SQL query to Calculate the difference in transaction amounts between deposits and 
withdrawals.
10. Write a SQL query to Calculate the average daily balance for each account over a specified 
period.
11. Calculate the total balance for each account type.
12. Identify accounts with the highest number of transactions order by descending order.
13. List customers with high aggregate account balances, along with their account types.
14. Identify and list duplicate transactions based on transaction amount, date, and account

Task 4: : Subquery and its type:
1. Retrieve the customer(s) with the highest account balance.
2. Calculate the average account balance for customers who have more than one account.
3. Retrieve accounts with transactions whose amounts exceed the average transaction amount.
4. Identify customers who have no recorded transactions.
5. Calculate the total balance of accounts with no recorded transactions.
6. Retrieve transactions for accounts with the lowest balance.
7. Identify customers who have accounts of multiple types.
8. Calculate the percentage of each account type out of the total number of accounts.
9. Retrieve all transactions for a customer with a given customer_id.
10. Calculate the total balance for each account type, including a subquery within the SELECT 
clause.
